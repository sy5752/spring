MYBATIS : 쿼리문 직접 작성 
JPA : VALUE객체에 저장하면 자동으로 쿼리문을 만들어줌 개발자가 코드에 집중할 수 있음
구글트렌드에서 전세계적으론 JPA >> MYBATIS
		  우리나라에선 MYBATIS > JPA

EJB ==> 스프링
EJB ==> 하이버네이터(MYBATIS)
------------------------------------------------------------------
* spring 설정

1.xml
2.java
3.java + xml
** 설정파일을 용도에 따라 여러개로 분리하는 것도 가능
-------------------------------------------------------------------
* 에러 
compiler 시점 - 로딩(서버 기동)시점- Runtime(실행을 해야만 발생하는 에러)

xml, java
-------------------------------------------------------------------
* Spring 타입변환 방법 3가지

- propertyEditor
- ConversionService
- FormattingConversionService
  : 추후 MVC에서 배우는 설정에 의해 명시적으로 등록하지 않아도 formattingConversionService가 등록됨
  	<mvc:annotation-driven/>
  	
xml에 값을 표시하는 방법은 문자열밖에 없음
value="5"

5라고 표시한 값을 java의 문자열 타입으로 해석할지 숫자 타입으로 해석할지는 해당 class의 필드 타입을 보고 스프링이 결정하게 된다

대다수의 타입은 스프링 프레임워크가 타입을 자동으로 변경하는 것이 가능하나

날짜 타입에 대해서는 국가별, 사용자별 표기 방식이 다르기 떄문에
프레임워크에서 임의로 타입 변환을 하는것이 불가능하다
(UserVo reg_dt 컬럼)
 스프링 프레임 우크에서 타입변환이 필요한 경우는 크게 두가지
 1. 값을 주입할떄(DI)
 2. 컨트롤러에서 파라미터를 value객체에 바인딩 할 때
 
 스프링 프레임 워크에서 커스텀 타입 변환을 등록하는 방법은 크게 3가지
 1. propertyEditor : 문자 <==> 타입 간의 변환
 2. conversionService : 타입 <==> 타입 간의 변환
 3. formattingConversionService : 타입 <==> 타입 간의 변환
 
 1~3의 방법을 동시에 적용하는 것은 불가능
 2,3의 경우 스프링 빈의 이름을 id="conversionService"로 사용하도록 스프링에서 강제함
 
 1번 : 생략
 2번 : 1. 스프링에서 제공하는 ConversionServiceFactoryBean 클래스를 스프링 빈으로 등록
 	  (위에서 언급한 스프링 빈 이름을 준수해야함)
 	  2. 해당 클래스의 converters 필드에 개발자가 만든 convert를 set으로 주입
 	  	 - 개발자가 만드는 converter는 Converter 인터페이스를 구현하여 만든다
 3번 : 1. 스프링에서 제공하는 FormattingConversionServiceFactoryBean 클래스를 스프링 빈으로 등록
 	  	 (위에서 언급한 스프링 빈 이름을 준수해야함)
 	  2. Value 객체의 필드에 어노테이션 적용
 	  
